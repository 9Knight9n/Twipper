version: '3.7'
services:
    web:
        build:
            context: ./backend
            dockerfile: ../docker/django/Dockerfile
        command: python manage.py runserver 0.0.0.0:8000
        ports:
            - "8000:8000"
        volumes:
            - ./backend:/app
            - static_volume:/app/static
            - media_volume:/app/media
        depends_on:
            - db

#    db:
#        image: mysql/mysql-server:8.0
#        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_general_ci
#        environment:
#            MYSQL_ROOT_PASSWORD: 'root_pass'
#        volumes:
#            - data_volume:/var/lib/mysql
#            - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
#            - ./docker/mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    db:
        image: postgres:14.2-bullseye
        environment:
            POSTGRES_USER: 'dbadmin'
            POSTGRES_PASSWORD: 'rS9ytkgUxFo9z#'
            POSTGRES_DB: 'TwipperDB'
            PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
            - data_volume:/var/lib/postgresql/data
#        ports:
#            - "5432:5432"
        restart: unless-stopped


    adminer:
        image: adminer:4.8.1-standalone
        restart: always
        depends_on:
            - db
        ports:
            - "8080:8080"


#    phpmyadmin:
#        image: phpmyadmin:5.2.0
#        ports:
#            - "8080:80"
#        environment:
#            PMA_ARBITRARY: 1
#            PMA_HOST: 'db'
#            PMA_USER: 'dbadmin'
#            PMA_PASSWORD: '123456789'
#        depends_on:
#            - db

    npm:
        build:
            context: ./frontend
            dockerfile: ../docker/npm/Dockerfile
        command: npm start
        volumes:
            - ./frontend:/app
            - npm_node_modules:/app/node_modules
        ports:
            - "3001:3000"
        environment:
            WATCHPACK_POLLING: "true"


volumes:
    static_volume:
    media_volume:
    data_volume:
    npm_node_modules: